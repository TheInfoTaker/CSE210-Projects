Write an Eternal Quest program to track various kinds of goals. The main focus of this program is to strictly follow the principals of inheritance, and polymorphism.

Your program can include whatever kinds of "gamification" components you like, but each program should have the following base functionality.

Functional requirements
Your program must do the following:
Provide for simple goals that can be marked complete and the user gains some value.
For example, if you run a marathon you get 1000 points.
Provide for eternal goals that are never complete, but each time the user records them, they gain some value.
For example, every time you read your scriptures you get 100 points.
Provide for a checklist goal that must be accomplished a certain number of times to be complete. Each time the user records this goal they gain some value, but when they achieve the desired amount, they get an extra bonus.
For example, if you set a goal to attend the temple 10 times, you might get 50 points each time you go, and then a bonus of 500 points on the 10th time.
Display the user's score.
Allow the user to create new goals of any type.
Allow the user to record an event (meaning they have accomplished a goal and should receive points).
Show a list of the goals. This list should show indicate whether the goal has been completed or not (for example [ ] compared to [X]), and for checklist goals it should show how many times the goal has been completed (for example Completed 2/5 times).
Allow the user's goals and their current score to be saved and loaded.

Design Requirements
In addition your program must:
Use inheritance by having a separate class for each kind of activity with a base class to contain any shared attributes or behaviors.
Use polymorphism by having derived classes override base class methods where appropriate.
Follow the principles of encapsulation and abstraction by having private member variables and putting related items in the same class.
/\/\/\/\/\//\/\/\/\/\/\/\/\\/\/\/\/\/\//\/\/\/\/\/\/\/\\/\/\\/\\/\/\/\/\/\/\/\/\/\/\\/\/\/\/\/\\\/\/\//\/\/\/\\
As with the previous assignment, there is a natural application of inheritance in this program with a base class of Goal that defines the common responsibilities, behaviors, and attributes. Then, you should have derived classes that override any behaviors necessary from the base class and add any additional unique responsibilities that they have.
Goal
SimpleGoal
EternalGoal
ChecklistGoal
While it is possible to handle all of the menu system and its related functions, including the saving of points, as static functions in the Program.cs file, because there is enough complexity there, it would be nice to encapsulate all that functionality into a separate "manager" class.
GoalManager
/\/\/\/\/\/\/\/\/\/\/\/\/\/\
One of the core pieces of functionality for each of these classes is that each goal needs to provide a way to record the event (in other words, mark that is has been accomplished another time). In addition, each one needs to provide a check to see if it is complete. Because these methods exist for all classes, they should be defined in the base class. However, because they all have different functionality, they should be overridden in the derived classes:
RecordEvent - This method should do whatever is necessary for each specific kind of goal, such as marking a simple goal complete and adding to the number of times a checklist goal has been completed. It should return the point value associated with recording the event (keep in mind that it may contain a bonus in some cases if a checklist goal was just finished, for example).
IsComplete - This method should return true if the goal is completed. The way you determine if a goal is complete is different for each type of goal.
In addition to recording the event and checking if it is complete. Each goal will need to be shown in a list (with the checkbox etc), and also each one will need a string representation that can be saved to a text file. These should also be declared in the base class and overridden in the derived classes as needed:
GetDetailsString - This method should return the details of a goal that could be shown in a list. It should include the checkbox, the short name, and description. Then in the case of the ChecklistGoal class, it should be overridden to shown the number of times the goal has been accomplished so far.
GetStringRepresentation - This method should provide all of the details of a goal in a way that is easy to save to a file, and then load later.
The following is a summary of the behaviors listed:
Goal
RecordEvent() : void (Abstract)
IsComplete() : bool (Abstract)
GetDetailsString() : string
GetStringRepresentation() : string (Abstract)
SimpleGoal
RecordEvent() : void (Override)
IsComplete() : bool (Override)
GetStringRepresentation() : string (Override)
EternalGoal
RecordEvent() : void (Override)
IsComplete() : bool (Override)
GetStringRepresentation() : string (Override)
ChecklistGoal
RecordEvent() : void (Override)
IsComplete() : bool (Override)
GetDetailsString() : string (Override)
GetStringRepresentation() : string (Override)
In addition to these behaviors for the goals, the goal manager class will need behaviors related to the menu system such as the following:
Start - This is the "main" function for this class. It is called by Program.cs, and then runs the menu loop.
DisplayPlayerInfo - Displays the players current score.
ListGoalNames - Lists the names of each of the goals.
ListGoalDetails - Lists the details of each goal (including the checkbox of whether it is complete).
CreateGoal - Asks the user for the information about a new goal. Then, creates the goal and adds it to the list.
RecordEvent - Asks the user which goal they have done and then records the event by calling the RecordEvent method on that goal.
SaveGoals - Saves the list of goals to a file.
LoadGoals - Loads the list of goals from a file.
In addition to the methods described here, you might find it helpful to create other private methods to help perform steps of these goals.
/\/\/\/\/\//\/\/\/\/\/\/\/\/\
The goal classes all have some common elements, such as the name for the goal, a description, and the points to award for recording an event of that type.
The derived goal classes will need to define the attributes necessary for them that are unique to each class. For example, the SimpleGoal will need to track whether it is complete and the ChecklistGoal will need to track the number of times it has been completed, the target number of times the user is striving for, and the bonus for achieving that target.
The following is a summary of the attributes needed:
Goal
_shortName : string
_description : string
_points : int
SimpleGoal
_isComplete : bool
EternalGoal
None needed
ChecklistGoal
_amountCompleted : int
_target : int
_bonus : int
In addition to the goal classes, the GoalManager class will need to keep track of the list of goals as well as the players score.
GoalManager
_goals : List<Goal>
_score : int
/\/\/\/\/\/\/\
Remember that constructors often need to account for the attributes that a class has. Some of these may need to be passed in as parameters, but others might be initialized to starting values such as false or 0.
The following constructors are appropriate for these classes:
Goal(name : string, description : string, points : int)
SimpleGoal(name : string, description : string, points : int) - This should also set the the variables for if it is complete to be false.
EternalGoal(name : string, description : string, points : int)
CheckListGoal(name : string, description : string, points : int, target : int, bonus : int) - In addition to the standard attributes, a checklist goal also needs the target and the bonus amounts. Then, it should set the amount completed to begin at 0.
GoalManager() - Initializes and empty list of goals and sets the player's score to be 0.

